/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_FILE_WITH_INIT
#include "enet/enet.h"


#include <stdint.h>		// Use the C99 official header


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long long[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1VERSION_1MAJOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1VERSION_1MINOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1VERSION_1PATCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(18);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((((1) << 16)|((3) << 8)|(18)));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1TYPE_1STREAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketType)ENET_SOCKET_TYPE_STREAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1TYPE_1DATAGRAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketType)ENET_SOCKET_TYPE_DATAGRAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1WAIT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketWait result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketWait)ENET_SOCKET_WAIT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1WAIT_1SEND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketWait result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketWait)ENET_SOCKET_WAIT_SEND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1WAIT_1RECEIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketWait result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketWait)ENET_SOCKET_WAIT_RECEIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1WAIT_1INTERRUPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketWait result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketWait)ENET_SOCKET_WAIT_INTERRUPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1NONBLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_NONBLOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1BROADCAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_BROADCAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1RCVBUF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_RCVBUF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1SNDBUF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_SNDBUF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1REUSEADDR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_REUSEADDR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1RCVTIMEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_RCVTIMEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1SNDTIMEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_SNDTIMEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1NODELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_NODELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKOPT_1TTL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketOption result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketOption)ENET_SOCKOPT_TTL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1SHUTDOWN_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketShutdown result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketShutdown)ENET_SOCKET_SHUTDOWN_READ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1SHUTDOWN_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketShutdown result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketShutdown)ENET_SOCKET_SHUTDOWN_WRITE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1SOCKET_1SHUTDOWN_1READ_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetSocketShutdown result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetSocketShutdown)ENET_SOCKET_SHUTDOWN_READ_WRITE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENET_1HOST_1BROADCAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(0xFFFFFFFFU);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PORT_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetAddress_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetAddress *arg1 = (_ENetAddress *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAddress **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->host = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetAddress_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetAddress *arg1 = (_ENetAddress *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAddress **)&jarg1; 
  result =  ((arg1)->host);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetAddress_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetAddress *arg1 = (_ENetAddress *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAddress **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetAddress_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetAddress *arg1 = (_ENetAddress *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAddress **)&jarg1; 
  result =  ((arg1)->port);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetAddress(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetAddress *)new _ENetAddress();
  *(_ENetAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetAddress *arg1 = (_ENetAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetAddress **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PACKET_1FLAG_1RELIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPacketFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacketFlag)ENET_PACKET_FLAG_RELIABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PACKET_1FLAG_1UNSEQUENCED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPacketFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacketFlag)ENET_PACKET_FLAG_UNSEQUENCED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PACKET_1FLAG_1NO_1ALLOCATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPacketFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacketFlag)ENET_PACKET_FLAG_NO_ALLOCATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PACKET_1FLAG_1UNRELIABLE_1FRAGMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPacketFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacketFlag)ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PACKET_1FLAG_1SENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPacketFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacketFlag)ENET_PACKET_FLAG_SENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1referenceCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->referenceCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1referenceCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result =  ((arg1)->referenceCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result =  ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  enet_uint8 *arg2 = (enet_uint8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = *(enet_uint8 **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  enet_uint8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result = (enet_uint8 *) ((arg1)->data);
  *(enet_uint8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1dataLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->dataLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1dataLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result =  ((arg1)->dataLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1freeCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  ENetPacketFreeCallback arg2 = (ENetPacketFreeCallback) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = *(ENetPacketFreeCallback *)&jarg2; 
  if (arg1) (arg1)->freeCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1freeCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  ENetPacketFreeCallback result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result = (ENetPacketFreeCallback) ((arg1)->freeCallback);
  *(ENetPacketFreeCallback *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPacket_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPacket_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPacket **)&jarg1; 
  result = (void *) ((arg1)->userData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetPacket(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPacket *)new _ENetPacket();
  *(_ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetPacket *arg1 = (_ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetAcknowledgement_1acknowledgementList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  ENetListNode arg2 ;
  ENetListNode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  argp2 = *(ENetListNode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetListNode");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->acknowledgementList = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetAcknowledgement_1acknowledgementList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  ENetListNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  result =  ((arg1)->acknowledgementList);
  *(ENetListNode **)&jresult = new ENetListNode(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetAcknowledgement_1sentTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->sentTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetAcknowledgement_1sentTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  result =  ((arg1)->sentTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetAcknowledgement_1command_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  ENetProtocol arg2 ;
  ENetProtocol *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  argp2 = *(ENetProtocol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetProtocol");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->command = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetAcknowledgement_1command_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  ENetProtocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  result =  ((arg1)->command);
  *(ENetProtocol **)&jresult = new ENetProtocol(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetAcknowledgement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetAcknowledgement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetAcknowledgement *)new _ENetAcknowledgement();
  *(_ENetAcknowledgement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetAcknowledgement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetAcknowledgement *arg1 = (_ENetAcknowledgement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetAcknowledgement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1outgoingCommandList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetListNode arg2 ;
  ENetListNode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  argp2 = *(ENetListNode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetListNode");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->outgoingCommandList = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1outgoingCommandList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetListNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->outgoingCommandList);
  *(ENetListNode **)&jresult = new ENetListNode(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1reliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->reliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1reliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->reliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1unreliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->unreliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1unreliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->unreliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1sentTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->sentTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1sentTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->sentTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1roundTripTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->roundTripTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1roundTripTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->roundTripTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1queueTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->queueTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1queueTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->queueTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1fragmentOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->fragmentOffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1fragmentOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->fragmentOffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1fragmentLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->fragmentLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1fragmentLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->fragmentLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1sendAttempts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->sendAttempts = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1sendAttempts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->sendAttempts);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1command_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetProtocol arg2 ;
  ENetProtocol *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  argp2 = *(ENetProtocol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetProtocol");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->command = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1command_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetProtocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result =  ((arg1)->command);
  *(ENetProtocol **)&jresult = new ENetProtocol(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1packet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetPacket *arg2 = (ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  arg2 = *(ENetPacket **)&jarg2; 
  if (arg1) (arg1)->packet = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetOutgoingCommand_1packet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  result = (ENetPacket *) ((arg1)->packet);
  *(ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetOutgoingCommand(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetOutgoingCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetOutgoingCommand *)new _ENetOutgoingCommand();
  *(_ENetOutgoingCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetOutgoingCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetOutgoingCommand *arg1 = (_ENetOutgoingCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetOutgoingCommand **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1incomingCommandList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetListNode arg2 ;
  ENetListNode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  argp2 = *(ENetListNode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetListNode");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->incomingCommandList = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1incomingCommandList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetListNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->incomingCommandList);
  *(ENetListNode **)&jresult = new ENetListNode(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1reliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->reliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1reliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->reliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1unreliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->unreliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1unreliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->unreliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1command_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetProtocol arg2 ;
  ENetProtocol *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  argp2 = *(ENetProtocol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetProtocol");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->command = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1command_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetProtocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->command);
  *(ENetProtocol **)&jresult = new ENetProtocol(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragmentCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->fragmentCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragmentCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->fragmentCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragmentsRemaining_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->fragmentsRemaining = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragmentsRemaining_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result =  ((arg1)->fragmentsRemaining);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragments_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 *arg2 = (enet_uint32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = *(enet_uint32 **)&jarg2; 
  if (arg1) (arg1)->fragments = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1fragments_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  enet_uint32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result = (enet_uint32 *) ((arg1)->fragments);
  *(enet_uint32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetIncomingCommand_1packet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetPacket *arg2 = (ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  arg2 = *(ENetPacket **)&jarg2; 
  if (arg1) (arg1)->packet = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetIncomingCommand_1packet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  result = (ENetPacket *) ((arg1)->packet);
  *(ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetIncomingCommand(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetIncomingCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetIncomingCommand *)new _ENetIncomingCommand();
  *(_ENetIncomingCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetIncomingCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetIncomingCommand *arg1 = (_ENetIncomingCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetIncomingCommand **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1DISCONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_DISCONNECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1CONNECTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_CONNECTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1ACKNOWLEDGING_1CONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_ACKNOWLEDGING_CONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1CONNECTION_1PENDING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_CONNECTION_PENDING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1CONNECTION_1SUCCEEDED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_CONNECTION_SUCCEEDED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1CONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_CONNECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1DISCONNECT_1LATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_DISCONNECT_LATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1DISCONNECTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_DISCONNECTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1ACKNOWLEDGING_1DISCONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1STATE_1ZOMBIE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerState)ENET_PEER_STATE_ZOMBIE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1RECEIVE_1BUFFER_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_RECEIVE_BUFFER_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1SEND_1BUFFER_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_SEND_BUFFER_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1BANDWIDTH_1THROTTLE_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1DEFAULT_1MTU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_DEFAULT_MTU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1DEFAULT_1MAXIMUM_1PACKET_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1HOST_1DEFAULT_1MAXIMUM_1WAITING_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1DEFAULT_1ROUND_1TRIP_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_DEFAULT_ROUND_TRIP_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1DEFAULT_1PACKET_1THROTTLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_DEFAULT_PACKET_THROTTLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1THROTTLE_1SCALE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_THROTTLE_SCALE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1THROTTLE_1COUNTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_THROTTLE_COUNTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1THROTTLE_1ACCELERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_THROTTLE_ACCELERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1THROTTLE_1DECELERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_THROTTLE_DECELERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1THROTTLE_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_THROTTLE_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1LOSS_1SCALE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_LOSS_SCALE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PACKET_1LOSS_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PACKET_LOSS_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1WINDOW_1SIZE_1SCALE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_WINDOW_SIZE_SCALE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1TIMEOUT_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_TIMEOUT_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1TIMEOUT_1MINIMUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_TIMEOUT_MINIMUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1TIMEOUT_1MAXIMUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_TIMEOUT_MAXIMUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1PING_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_PING_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1UNSEQUENCED_1WINDOWS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_UNSEQUENCED_WINDOWS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1UNSEQUENCED_1WINDOW_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_UNSEQUENCED_WINDOW_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1FREE_1UNSEQUENCED_1WINDOWS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_FREE_UNSEQUENCED_WINDOWS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1RELIABLE_1WINDOWS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_RELIABLE_WINDOWS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1RELIABLE_1WINDOW_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_RELIABLE_WINDOW_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1FREE_1RELIABLE_1WINDOWS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ENET_PEER_FREE_RELIABLE_WINDOWS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1outgoingReliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->outgoingReliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1outgoingReliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->outgoingReliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1outgoingUnreliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->outgoingUnreliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1outgoingUnreliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->outgoingUnreliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1usedReliableWindows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->usedReliableWindows = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1usedReliableWindows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->usedReliableWindows);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1reliableWindows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 *arg2 = (enet_uint16 *) (enet_uint16 *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = *(enet_uint16 **)&jarg2; 
  {
    size_t ii;
    enet_uint16 *b = (enet_uint16 *) arg1->reliableWindows;
    for (ii = 0; ii < (size_t)ENET_PEER_RELIABLE_WINDOWS; ii++) b[ii] = *((enet_uint16 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1reliableWindows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result = (enet_uint16 *)(enet_uint16 *) ((arg1)->reliableWindows);
  *(enet_uint16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1incomingReliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->incomingReliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1incomingReliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->incomingReliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1incomingUnreliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->incomingUnreliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1incomingUnreliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->incomingUnreliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1incomingReliableCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->incomingReliableCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1incomingReliableCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->incomingReliableCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetChannel_1incomingUnreliableCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->incomingUnreliableCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetChannel_1incomingUnreliableCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetChannel **)&jarg1; 
  result =  ((arg1)->incomingUnreliableCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetChannel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetChannel *)new _ENetChannel();
  *(_ENetChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetChannel *arg1 = (_ENetChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1FLAG_1NEEDS_1DISPATCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerFlag)ENET_PEER_FLAG_NEEDS_DISPATCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1PEER_1FLAG_1CONTINUE_1SENDING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetPeerFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeerFlag)ENET_PEER_FLAG_CONTINUE_SENDING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1dispatchList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetListNode arg2 ;
  ENetListNode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetListNode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetListNode");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dispatchList = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1dispatchList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetListNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->dispatchList);
  *(ENetListNode **)&jresult = new ENetListNode(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  _ENetHost *arg2 = (_ENetHost *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = *(_ENetHost **)&jarg2; 
  if (arg1) (arg1)->host = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  _ENetHost *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (_ENetHost *) ((arg1)->host);
  *(_ENetHost **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingPeerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->outgoingPeerID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingPeerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingPeerID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingPeerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->incomingPeerID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingPeerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingPeerID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1connectID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->connectID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1connectID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->connectID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingSessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint8)jarg2; 
  if (arg1) (arg1)->outgoingSessionID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingSessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingSessionID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingSessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint8)jarg2; 
  if (arg1) (arg1)->incomingSessionID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingSessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingSessionID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = *(ENetAddress **)&jarg2; 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (ENetAddress *)& ((arg1)->address);
  *(ENetAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (void *) ((arg1)->data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetPeerState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (ENetPeerState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENetPeer_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetPeerState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (ENetPeerState) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1channels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetChannel *arg2 = (ENetChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = *(ENetChannel **)&jarg2; 
  if (arg1) (arg1)->channels = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1channels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (ENetChannel *) ((arg1)->channels);
  *(ENetChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1channelCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1channelCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->channelCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->incomingBandwidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingBandwidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->outgoingBandwidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingBandwidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingBandwidthThrottleEpoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->incomingBandwidthThrottleEpoch = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingBandwidthThrottleEpoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingBandwidthThrottleEpoch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingBandwidthThrottleEpoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->outgoingBandwidthThrottleEpoch = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingBandwidthThrottleEpoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingBandwidthThrottleEpoch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingDataTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->incomingDataTotal = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingDataTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingDataTotal);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingDataTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->outgoingDataTotal = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingDataTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingDataTotal);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1lastSendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->lastSendTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1lastSendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->lastSendTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1lastReceiveTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->lastReceiveTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1lastReceiveTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->lastReceiveTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1nextTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->nextTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1nextTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->nextTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1earliestTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->earliestTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1earliestTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->earliestTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetLossEpoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetLossEpoch = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetLossEpoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetLossEpoch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetsSent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetsSent = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetsSent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetsSent);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetsLost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetsLost = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetsLost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetsLost);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetLoss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetLoss = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetLoss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetLoss);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetLossVariance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetLossVariance = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetLossVariance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetLossVariance);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottle = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottle);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleLimit = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleLimit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleCounter = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleCounter);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleEpoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleEpoch = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleEpoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleEpoch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleAcceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleAcceleration = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleAcceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleAcceleration);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleDeceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleDeceleration = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleDeceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleDeceleration);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->packetThrottleInterval = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1packetThrottleInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->packetThrottleInterval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1pingInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->pingInterval = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1pingInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->pingInterval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1timeoutLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->timeoutLimit = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1timeoutLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->timeoutLimit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1timeoutMinimum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->timeoutMinimum = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1timeoutMinimum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->timeoutMinimum);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1timeoutMaximum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->timeoutMaximum = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1timeoutMaximum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->timeoutMaximum);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1lastRoundTripTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->lastRoundTripTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1lastRoundTripTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->lastRoundTripTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1lowestRoundTripTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->lowestRoundTripTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1lowestRoundTripTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->lowestRoundTripTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1lastRoundTripTimeVariance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->lastRoundTripTimeVariance = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1lastRoundTripTimeVariance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->lastRoundTripTimeVariance);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1highestRoundTripTimeVariance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->highestRoundTripTimeVariance = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1highestRoundTripTimeVariance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->highestRoundTripTimeVariance);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1roundTripTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->roundTripTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1roundTripTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->roundTripTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1roundTripTimeVariance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->roundTripTimeVariance = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1roundTripTimeVariance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->roundTripTimeVariance);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->mtu = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->mtu);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1windowSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->windowSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1windowSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->windowSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1reliableDataInTransit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->reliableDataInTransit = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1reliableDataInTransit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->reliableDataInTransit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingReliableSequenceNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->outgoingReliableSequenceNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingReliableSequenceNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingReliableSequenceNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1acknowledgements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->acknowledgements = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1acknowledgements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->acknowledgements);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1sentReliableCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sentReliableCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1sentReliableCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->sentReliableCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingSendReliableCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->outgoingSendReliableCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingSendReliableCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingSendReliableCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->outgoingCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1dispatchedCommands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dispatchedCommands = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1dispatchedCommands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->dispatchedCommands);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->reserved);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1incomingUnsequencedGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->incomingUnsequencedGroup = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1incomingUnsequencedGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->incomingUnsequencedGroup);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1outgoingUnsequencedGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->outgoingUnsequencedGroup = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1outgoingUnsequencedGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->outgoingUnsequencedGroup);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1unsequencedWindow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 *arg2 = (enet_uint32 *) (enet_uint32 *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = *(enet_uint32 **)&jarg2; 
  {
    size_t ii;
    enet_uint32 *b = (enet_uint32 *) arg1->unsequencedWindow;
    for (ii = 0; ii < (size_t)ENET_PEER_UNSEQUENCED_WINDOW_SIZE/32; ii++) b[ii] = *((enet_uint32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1unsequencedWindow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result = (enet_uint32 *)(enet_uint32 *) ((arg1)->unsequencedWindow);
  *(enet_uint32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1eventData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->eventData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1eventData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->eventData);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetPeer_1totalWaitingData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->totalWaitingData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetPeer_1totalWaitingData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetPeer **)&jarg1; 
  result =  ((arg1)->totalWaitingData);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetPeer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetPeer *)new _ENetPeer();
  *(_ENetPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetPeer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetPeer *arg1 = (_ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetPeer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetCompressor_1context_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->context = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetCompressor_1context_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  result = (void *) ((arg1)->context);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetCompressor_1compress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  size_t (*arg2)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t) = (size_t (*)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  arg2 = *(size_t (**)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t))&jarg2; 
  if (arg1) (arg1)->compress = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetCompressor_1compress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  size_t (*result)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  result = (size_t (*)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t)) ((arg1)->compress);
  *(size_t (**)(void *,ENetBuffer const *,size_t,size_t,enet_uint8 *,size_t))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetCompressor_1decompress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  size_t (*arg2)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t) = (size_t (*)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  arg2 = *(size_t (**)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t))&jarg2; 
  if (arg1) (arg1)->decompress = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetCompressor_1decompress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  size_t (*result)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  result = (size_t (*)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t)) ((arg1)->decompress);
  *(size_t (**)(void *,enet_uint8 const *,size_t,enet_uint8 *,size_t))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetCompressor_1destroy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  arg2 = *(void (**)(void *))&jarg2; 
  if (arg1) (arg1)->destroy = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetCompressor_1destroy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  void (*result)(void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetCompressor **)&jarg1; 
  result = (void (*)(void *)) ((arg1)->destroy);
  *(void (**)(void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetCompressor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetCompressor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetCompressor *)new _ENetCompressor();
  *(_ENetCompressor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetCompressor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetCompressor *arg1 = (_ENetCompressor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetCompressor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1socket_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetSocket arg2 ;
  ENetSocket *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  argp2 = *(ENetSocket **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->socket = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1socket_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetSocket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->socket);
  *(ENetSocket **)&jresult = new ENetSocket(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetAddress **)&jarg2; 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetAddress *)& ((arg1)->address);
  *(ENetAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1incomingBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->incomingBandwidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1incomingBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->incomingBandwidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1outgoingBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->outgoingBandwidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1outgoingBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->outgoingBandwidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1bandwidthThrottleEpoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->bandwidthThrottleEpoch = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1bandwidthThrottleEpoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->bandwidthThrottleEpoch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->mtu = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->mtu);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1randomSeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->randomSeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1randomSeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->randomSeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1recalculateBandwidthLimits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->recalculateBandwidthLimits = arg2;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENetHost_1recalculateBandwidthLimits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (int) ((arg1)->recalculateBandwidthLimits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetPeer *arg2 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetPeer **)&jarg2; 
  if (arg1) (arg1)->peers = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetPeer *) ((arg1)->peers);
  *(ENetPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1peerCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->peerCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1peerCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->peerCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1channelLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->channelLimit = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1channelLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->channelLimit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1serviceTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->serviceTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1serviceTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->serviceTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1dispatchQueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetList arg2 ;
  ENetList *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  argp2 = *(ENetList **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetList");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dispatchQueue = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1dispatchQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->dispatchQueue);
  *(ENetList **)&jresult = new ENetList(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1totalQueued_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->totalQueued = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1totalQueued_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->totalQueued);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1packetSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->packetSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1packetSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->packetSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1headerFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint16)jarg2; 
  if (arg1) (arg1)->headerFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1headerFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->headerFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1commands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetProtocol *arg2 = (ENetProtocol *) (ENetProtocol *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetProtocol **)&jarg2; 
  {
    size_t ii;
    ENetProtocol *b = (ENetProtocol *) arg1->commands;
    for (ii = 0; ii < (size_t)ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS; ii++) b[ii] = *((ENetProtocol *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1commands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetProtocol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetProtocol *)(ENetProtocol *) ((arg1)->commands);
  *(ENetProtocol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1commandCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->commandCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1commandCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->commandCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1buffers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetBuffer *arg2 = (ENetBuffer *) (ENetBuffer *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetBuffer **)&jarg2; 
  {
    size_t ii;
    ENetBuffer *b = (ENetBuffer *) arg1->buffers;
    for (ii = 0; ii < (size_t)(1+2*ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS); ii++) b[ii] = *((ENetBuffer *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1buffers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetBuffer *)(ENetBuffer *) ((arg1)->buffers);
  *(ENetBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1bufferCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->bufferCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1bufferCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->bufferCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1checksum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetChecksumCallback arg2 = (ENetChecksumCallback) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetChecksumCallback *)&jarg2; 
  if (arg1) (arg1)->checksum = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1checksum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetChecksumCallback result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetChecksumCallback) ((arg1)->checksum);
  *(ENetChecksumCallback *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1compressor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetCompressor *arg2 = (ENetCompressor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetCompressor **)&jarg2; 
  if (arg1) (arg1)->compressor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1compressor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetCompressor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetCompressor *)& ((arg1)->compressor);
  *(ENetCompressor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1packetData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint8 (*arg2)[ENET_PROTOCOL_MAXIMUM_MTU] = (enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU]) (enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU])0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(enet_uint8 (**)[ENET_PROTOCOL_MAXIMUM_MTU])&jarg2; 
  {
    enet_uint8 (*inp)[ENET_PROTOCOL_MAXIMUM_MTU] = (enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU])(arg2);
    enet_uint8 (*dest)[ENET_PROTOCOL_MAXIMUM_MTU] = (enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU])(arg1->packetData);
    size_t ii = 0;
    for (; ii < 2; ++ii) {
      enet_uint8 *ip = inp[ii];
      enet_uint8 *dp = dest[ii];
      size_t jj = 0;
      for (; jj < ENET_PROTOCOL_MAXIMUM_MTU; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1packetData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint8 (*result)[ENET_PROTOCOL_MAXIMUM_MTU] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU])(enet_uint8 (*)[ENET_PROTOCOL_MAXIMUM_MTU]) ((arg1)->packetData);
  *(enet_uint8 (**)[ENET_PROTOCOL_MAXIMUM_MTU])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1receivedAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetAddress **)&jarg2; 
  if (arg1) (arg1)->receivedAddress = *arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1receivedAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetAddress *)& ((arg1)->receivedAddress);
  *(ENetAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1receivedData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint8 *arg2 = (enet_uint8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(enet_uint8 **)&jarg2; 
  if (arg1) (arg1)->receivedData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1receivedData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (enet_uint8 *) ((arg1)->receivedData);
  *(enet_uint8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1receivedDataLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->receivedDataLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1receivedDataLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->receivedDataLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1totalSentData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->totalSentData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1totalSentData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->totalSentData);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1totalSentPackets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->totalSentPackets = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1totalSentPackets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->totalSentPackets);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1totalReceivedData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->totalReceivedData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1totalReceivedData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->totalReceivedData);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1totalReceivedPackets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->totalReceivedPackets = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1totalReceivedPackets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->totalReceivedPackets);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1intercept_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetInterceptCallback arg2 = (ENetInterceptCallback) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = *(ENetInterceptCallback *)&jarg2; 
  if (arg1) (arg1)->intercept = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1intercept_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  ENetInterceptCallback result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result = (ENetInterceptCallback) ((arg1)->intercept);
  *(ENetInterceptCallback *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1connectedPeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->connectedPeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1connectedPeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->connectedPeers);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1bandwidthLimitedPeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->bandwidthLimitedPeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1bandwidthLimitedPeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->bandwidthLimitedPeers);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1duplicatePeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->duplicatePeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1duplicatePeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->duplicatePeers);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1maximumPacketSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->maximumPacketSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1maximumPacketSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->maximumPacketSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetHost_1maximumWaitingData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->maximumWaitingData = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetHost_1maximumWaitingData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetHost **)&jarg1; 
  result =  ((arg1)->maximumWaitingData);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetHost(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetHost *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetHost *)new _ENetHost();
  *(_ENetHost **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetHost(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetHost *arg1 = (_ENetHost *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetHost **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1EVENT_1TYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetEventType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetEventType)ENET_EVENT_TYPE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1EVENT_1TYPE_1CONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetEventType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetEventType)ENET_EVENT_TYPE_CONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1EVENT_1TYPE_1DISCONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetEventType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetEventType)ENET_EVENT_TYPE_DISCONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENET_1EVENT_1TYPE_1RECEIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  _ENetEventType result;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetEventType)ENET_EVENT_TYPE_RECEIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetEventType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  arg2 = (ENetEventType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_ENetEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetEventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  result = (ENetEventType) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetEvent_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetPeer *arg2 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetEvent **)&jarg1; 
  arg2 = *(ENetPeer **)&jarg2; 
  if (arg1) (arg1)->peer = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetEvent_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  result = (ENetPeer *) ((arg1)->peer);
  *(ENetPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetEvent_1channelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  enet_uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  arg2 = (enet_uint8)jarg2; 
  if (arg1) (arg1)->channelID = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetEvent_1channelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  enet_uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  result =  ((arg1)->channelID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetEvent_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetEvent_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  result =  ((arg1)->data);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_ENetEvent_1packet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetPacket *arg2 = (ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(_ENetEvent **)&jarg1; 
  arg2 = *(ENetPacket **)&jarg2; 
  if (arg1) (arg1)->packet = arg2;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_ENetEvent_1packet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_ENetEvent **)&jarg1; 
  result = (ENetPacket *) ((arg1)->packet);
  *(ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_new_1ENetEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _ENetEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_ENetEvent *)new _ENetEvent();
  *(_ENetEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_delete_1ENetEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _ENetEvent *arg1 = (_ENetEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_ENetEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1initialize(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)enet_initialize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1initialize_1with_1callbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ENetVersion arg1 ;
  ENetCallbacks *arg2 = (ENetCallbacks *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ENetVersion)jarg1; 
  arg2 = *(ENetCallbacks **)&jarg2; 
  result = (int)enet_initialize_with_callbacks(SWIG_STD_MOVE(arg1),(ENetCallbacks const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1deinitialize(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  enet_deinitialize();
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1linked_1version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ENetVersion result;
  
  (void)jenv;
  (void)jcls;
  result = enet_linked_version();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1time_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  result = enet_time_get();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  enet_uint32 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enet_uint32)jarg1; 
  enet_time_set(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1socket_1create(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ENetSocketType arg1 ;
  ENetSocket result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ENetSocketType)jarg1; 
  result = enet_socket_create(arg1);
  *(ENetSocket **)&jresult = new ENetSocket(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1bind(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  result = (int)enet_socket_bind(SWIG_STD_MOVE(arg1),(_ENetAddress const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  result = (int)enet_socket_get_address(SWIG_STD_MOVE(arg1),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1listen(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  int arg2 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (int)enet_socket_listen(SWIG_STD_MOVE(arg1),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1socket_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetSocket *argp1 ;
  ENetSocket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  result = enet_socket_accept(SWIG_STD_MOVE(arg1),arg2);
  *(ENetSocket **)&jresult = new ENetSocket(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  result = (int)enet_socket_connect(SWIG_STD_MOVE(arg1),(_ENetAddress const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetBuffer *arg3 = (ENetBuffer *) 0 ;
  size_t arg4 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  arg3 = *(ENetBuffer **)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (int)enet_socket_send(SWIG_STD_MOVE(arg1),(_ENetAddress const *)arg2,(ENetBuffer const *)arg3,SWIG_STD_MOVE(arg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1receive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  ENetBuffer *arg3 = (ENetBuffer *) 0 ;
  size_t arg4 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetAddress **)&jarg2; 
  arg3 = *(ENetBuffer **)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (int)enet_socket_receive(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  enet_uint32 *arg2 = (enet_uint32 *) 0 ;
  enet_uint32 arg3 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(enet_uint32 **)&jarg2; 
  arg3 = (enet_uint32)jarg3; 
  result = (int)enet_socket_wait(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1set_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetSocketOption arg2 ;
  int arg3 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (ENetSocketOption)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)enet_socket_set_option(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1get_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetSocketOption arg2 ;
  int *arg3 = (int *) 0 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (ENetSocketOption)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)enet_socket_get_option(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socket_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetSocketShutdown arg2 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (ENetSocketShutdown)jarg2; 
  result = (int)enet_socket_shutdown(SWIG_STD_MOVE(arg1),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1socket_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ENetSocket arg1 ;
  ENetSocket *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return ;
  }
  arg1 = *argp1; 
  enet_socket_destroy(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1socketset_1select(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ENetSocket arg1 ;
  ENetSocketSet *arg2 = (ENetSocketSet *) 0 ;
  ENetSocketSet *arg3 = (ENetSocketSet *) 0 ;
  enet_uint32 arg4 ;
  ENetSocket *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ENetSocket **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ENetSocket");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(ENetSocketSet **)&jarg2; 
  arg3 = *(ENetSocketSet **)&jarg3; 
  arg4 = (enet_uint32)jarg4; 
  result = (int)enet_socketset_select(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1address_1set_1host_1ip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ENetAddress *arg1 = (ENetAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetAddress **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)enet_address_set_host_ip(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1address_1set_1host(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ENetAddress *arg1 = (ENetAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetAddress **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)enet_address_set_host(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1address_1get_1host_1ip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ENetAddress *arg1 = (ENetAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetAddress **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (int)enet_address_get_host_ip((_ENetAddress const *)arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1address_1get_1host(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ENetAddress *arg1 = (ENetAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetAddress **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (int)enet_address_get_host((_ENetAddress const *)arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1packet_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  enet_uint32 arg3 ;
  ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (enet_uint32)jarg3; 
  result = (ENetPacket *)enet_packet_create((void const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  *(ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1packet_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPacket *arg1 = (ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPacket **)&jarg1; 
  enet_packet_destroy(arg1);
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1packet_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ENetPacket *arg1 = (ENetPacket *) 0 ;
  size_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPacket **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)enet_packet_resize(arg1,SWIG_STD_MOVE(arg2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1crc32(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ENetBuffer *arg1 = (ENetBuffer *) 0 ;
  size_t arg2 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ENetBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = enet_crc32((ENetBuffer const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1host_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ENetAddress *arg1 = (ENetAddress *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  enet_uint32 arg4 ;
  enet_uint32 arg5 ;
  ENetHost *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetAddress **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (enet_uint32)jarg4; 
  arg5 = (enet_uint32)jarg5; 
  result = (ENetHost *)enet_host_create((_ENetAddress const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  *(ENetHost **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  enet_host_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1host_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ENetHost *arg1 = (ENetHost *) 0 ;
  ENetAddress *arg2 = (ENetAddress *) 0 ;
  size_t arg3 ;
  enet_uint32 arg4 ;
  ENetPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = *(ENetAddress **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (enet_uint32)jarg4; 
  result = (ENetPeer *)enet_host_connect(arg1,(_ENetAddress const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  *(ENetPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1host_1check_1events(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ENetHost *arg1 = (ENetHost *) 0 ;
  ENetEvent *arg2 = (ENetEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = *(ENetEvent **)&jarg2; 
  result = (int)enet_host_check_events(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1host_1service(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  ENetHost *arg1 = (ENetHost *) 0 ;
  ENetEvent *arg2 = (ENetEvent *) 0 ;
  enet_uint32 arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = *(ENetEvent **)&jarg2; 
  arg3 = (enet_uint32)jarg3; 
  result = (int)enet_host_service(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  enet_host_flush(arg1);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1broadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  enet_uint8 arg2 ;
  ENetPacket *arg3 = (ENetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = (enet_uint8)jarg2; 
  arg3 = *(ENetPacket **)&jarg3; 
  enet_host_broadcast(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1compress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  ENetCompressor *arg2 = (ENetCompressor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = *(ENetCompressor **)&jarg2; 
  enet_host_compress(arg1,(_ENetCompressor const *)arg2);
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1host_1compress_1with_1range_1coder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ENetHost *arg1 = (ENetHost *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  result = (int)enet_host_compress_with_range_coder(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1channel_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = (size_t)jarg2; 
  enet_host_channel_limit(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1bandwidth_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  enet_uint32 arg2 ;
  enet_uint32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  arg3 = (enet_uint32)jarg3; 
  enet_host_bandwidth_limit(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1host_1bandwidth_1throttle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetHost *arg1 = (ENetHost *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  enet_host_bandwidth_throttle(arg1);
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1host_1random_1seed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  result = enet_host_random_seed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1host_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ENetHost *arg1 = (ENetHost *) 0 ;
  enet_uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetHost **)&jarg1; 
  result = enet_host_random(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1peer_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint8 arg2 ;
  ENetPacket *arg3 = (ENetPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint8)jarg2; 
  arg3 = *(ENetPacket **)&jarg3; 
  result = (int)enet_peer_send(arg1,SWIG_STD_MOVE(arg2),arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1peer_1receive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint8 *arg2 = (enet_uint8 *) 0 ;
  ENetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(enet_uint8 **)&jarg2; 
  result = (ENetPacket *)enet_peer_receive(arg1,arg2);
  *(ENetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1ping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  enet_peer_ping(arg1);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1ping_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  enet_peer_ping_interval(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1timeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  enet_uint32 arg3 ;
  enet_uint32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  arg3 = (enet_uint32)jarg3; 
  arg4 = (enet_uint32)jarg4; 
  enet_peer_timeout(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  enet_peer_reset(arg1);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  enet_peer_disconnect(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1disconnect_1now(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  enet_peer_disconnect_now(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1disconnect_1later(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  enet_peer_disconnect_later(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1throttle_1configure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  enet_uint32 arg3 ;
  enet_uint32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  arg3 = (enet_uint32)jarg3; 
  arg4 = (enet_uint32)jarg4; 
  enet_peer_throttle_configure(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1peer_1throttle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  enet_uint32 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = (enet_uint32)jarg2; 
  result = (int)enet_peer_throttle(arg1,SWIG_STD_MOVE(arg2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1reset_1queues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  enet_peer_reset_queues(arg1);
}


SWIGEXPORT jint JNICALL Java_enet_enetJNI_enet_1peer_1has_1outgoing_1commands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  result = (int)enet_peer_has_outgoing_commands(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1setup_1outgoing_1command(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetOutgoingCommand *arg2 = (ENetOutgoingCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetOutgoingCommand **)&jarg2; 
  enet_peer_setup_outgoing_command(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1peer_1queue_1outgoing_1command(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetProtocol *arg2 = (ENetProtocol *) 0 ;
  ENetPacket *arg3 = (ENetPacket *) 0 ;
  enet_uint32 arg4 ;
  enet_uint16 arg5 ;
  ENetOutgoingCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetProtocol **)&jarg2; 
  arg3 = *(ENetPacket **)&jarg3; 
  arg4 = (enet_uint32)jarg4; 
  arg5 = (enet_uint16)jarg5; 
  result = (ENetOutgoingCommand *)enet_peer_queue_outgoing_command(arg1,(ENetProtocol const *)arg2,arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  *(ENetOutgoingCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1peer_1queue_1incoming_1command(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetProtocol *arg2 = (ENetProtocol *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  enet_uint32 arg5 ;
  enet_uint32 arg6 ;
  ENetIncomingCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetProtocol **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (enet_uint32)jarg5; 
  arg6 = (enet_uint32)jarg6; 
  result = (ENetIncomingCommand *)enet_peer_queue_incoming_command(arg1,(ENetProtocol const *)arg2,(void const *)arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  *(ENetIncomingCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1peer_1queue_1acknowledgement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetProtocol *arg2 = (ENetProtocol *) 0 ;
  enet_uint16 arg3 ;
  ENetAcknowledgement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetProtocol **)&jarg2; 
  arg3 = (enet_uint16)jarg3; 
  result = (ENetAcknowledgement *)enet_peer_queue_acknowledgement(arg1,(ENetProtocol const *)arg2,SWIG_STD_MOVE(arg3));
  *(ENetAcknowledgement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1dispatch_1incoming_1unreliable_1commands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetChannel *arg2 = (ENetChannel *) 0 ;
  ENetIncomingCommand *arg3 = (ENetIncomingCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetChannel **)&jarg2; 
  arg3 = *(ENetIncomingCommand **)&jarg3; 
  enet_peer_dispatch_incoming_unreliable_commands(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1dispatch_1incoming_1reliable_1commands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  ENetChannel *arg2 = (ENetChannel *) 0 ;
  ENetIncomingCommand *arg3 = (ENetIncomingCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ENetPeer **)&jarg1; 
  arg2 = *(ENetChannel **)&jarg2; 
  arg3 = *(ENetIncomingCommand **)&jarg3; 
  enet_peer_dispatch_incoming_reliable_commands(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1on_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  enet_peer_on_connect(arg1);
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1peer_1on_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ENetPeer *arg1 = (ENetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ENetPeer **)&jarg1; 
  enet_peer_on_disconnect(arg1);
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1range_1coder_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void *)enet_range_coder_create();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enet_enetJNI_enet_1range_1coder_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  enet_range_coder_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1range_1coder_1compress(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ENetBuffer *arg2 = (ENetBuffer *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  enet_uint8 *arg5 = (enet_uint8 *) 0 ;
  size_t arg6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ENetBuffer **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(enet_uint8 **)&jarg5; 
  arg6 = (size_t)jarg6; 
  result = enet_range_coder_compress(arg1,(ENetBuffer const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5,SWIG_STD_MOVE(arg6));
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1range_1coder_1decompress(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  enet_uint8 *arg2 = (enet_uint8 *) 0 ;
  size_t arg3 ;
  enet_uint8 *arg4 = (enet_uint8 *) 0 ;
  size_t arg5 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(enet_uint8 **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(enet_uint8 **)&jarg4; 
  arg5 = (size_t)jarg5; 
  result = enet_range_coder_decompress(arg1,(enet_uint8 const *)arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5));
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enet_enetJNI_enet_1protocol_1command_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  enet_uint8 arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enet_uint8)jarg1; 
  result = enet_protocol_command_size(SWIG_STD_MOVE(arg1));
  jresult = (jlong)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

